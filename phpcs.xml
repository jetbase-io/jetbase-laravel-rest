<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PHP_CodeSniffer" xsi:noNamespaceSchemaLocation="phpcs.xsd">
  <description>The coding standard for Jetbase' team Laravel projects</description>

  <exclude-pattern>*/vendor/*</exclude-pattern>

  <arg name="basepath" value="."/>
  <arg name="colors"/>
  <arg name="parallel" value="75"/>
  <arg value="np"/>

<!--  &lt;!&ndash; Don't hide tokenizer exceptions &ndash;&gt;-->
<!--  <rule ref="Internal.Tokenizer.Exception">-->
<!--    <type>error</type>-->
<!--  </rule>-->

  <!-- Include the whole PEAR standard -->
  <rule ref="PEAR">
    <exclude name="PEAR.Commenting.ClassComment"/>
    <exclude name="PEAR.Commenting.FileComment"/>
    <exclude name="PEAR.Commenting.FunctionComment"/>
    <exclude name="PEAR.Functions.FunctionCallSignature"/>
  </rule>

<!--  &lt;!&ndash; Include some sniffs from other standards that don't conflict with PEAR &ndash;&gt;-->
<!--  <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>-->
<!--  <rule ref="Squiz.Arrays.ArrayDeclaration"/>-->
<!--  <rule ref="Squiz.Commenting.ClosingDeclarationComment"/>-->
<!--  <rule ref="Squiz.ControlStructures.ControlSignature"/>-->
<!--  <rule ref="Squiz.ControlStructures.ElseIfDeclaration"/>-->
<!--  <rule ref="Squiz.Commenting.BlockComment"/>-->
<!--  <rule ref="Squiz.Commenting.DocCommentAlignment"/>-->
<!--  <rule ref="Squiz.Commenting.EmptyCatchComment"/>-->
<!--  <rule ref="Squiz.Commenting.InlineComment"/>-->
<!--  <rule ref="Squiz.Commenting.LongConditionClosingComment"/>-->
<!--  <rule ref="Squiz.Commenting.PostStatementComment"/>-->
<!--  <rule ref="Squiz.Commenting.VariableComment"/>-->
<!--  <rule ref="Squiz.Formatting.OperatorBracket"/>-->
<!--  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing"/>-->
<!--  <rule ref="Squiz.Operators.ComparisonOperatorUsage"/>-->
<!--  <rule ref="Squiz.PHP.DisallowInlineIf"/>-->
<!--  <rule ref="Squiz.Scope.MethodScope"/>-->
<!--  <rule ref="Squiz.Strings.ConcatenationSpacing"/>-->
<!--  <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>-->
<!--  <rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace"/>-->
<!--  <rule ref="Squiz.WhiteSpace.FunctionSpacing"/>-->
<!--  <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>-->
<!--  <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>-->
<!--  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>-->
<!--  <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>-->
<!--  <rule ref="Generic.Commenting.Todo"/>-->
<!--  <rule ref="Generic.ControlStructures.InlineControlStructure"/>-->
<!--  <rule ref="Generic.Formatting.DisallowMultipleStatements"/>-->
<!--  <rule ref="Generic.Formatting.SpaceAfterCast"/>-->
<!--  <rule ref="Generic.NamingConventions.ConstructorName"/>-->
<!--  <rule ref="Generic.PHP.DeprecatedFunctions"/>-->
<!--  <rule ref="Generic.PHP.LowerCaseKeyword"/>-->
<!--  <rule ref="Generic.Strings.UnnecessaryStringConcat"/>-->
<!--  <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>-->
<!--  <rule ref="PSR2.Classes.PropertyDeclaration"/>-->
<!--  <rule ref="PSR2.Methods.MethodDeclaration"/>-->
<!--  <rule ref="PSR2.Files.EndFileNewline"/>-->
<!--  <rule ref="PSR12.Files.OpenTag"/>-->
<!--  <rule ref="Zend.Files.ClosingTag"/>-->

<!--  &lt;!&ndash; PEAR uses warnings for inline control structures, so switch back to errors &ndash;&gt;-->
<!--  <rule ref="Generic.ControlStructures.InlineControlStructure">-->
<!--    <properties>-->
<!--      <property name="error" value="true"/>-->
<!--    </properties>-->
<!--  </rule>-->

<!--  &lt;!&ndash; We use custom indent rules for arrays &ndash;&gt;-->
<!--  <rule ref="Generic.Arrays.ArrayIndent"/>-->
<!--  <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">-->
<!--    <severity>0</severity>-->
<!--  </rule>-->
<!--  <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">-->
<!--    <severity>0</severity>-->
<!--  </rule>-->
<!--  <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">-->
<!--    <severity>0</severity>-->
<!--  </rule>-->
<!--  <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">-->
<!--    <severity>0</severity>-->
<!--  </rule>-->

<!--  &lt;!&ndash; Check var names, but we don't want leading underscores for private vars &ndash;&gt;-->
<!--  <rule ref="Squiz.NamingConventions.ValidVariableName"/>-->
<!--  <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">-->
<!--    <severity>0</severity>-->
<!--  </rule>-->

<!--  &lt;!&ndash; Only one argument per line in multi-line function calls &ndash;&gt;-->
<!--  <rule ref="PEAR.Functions.FunctionCallSignature">-->
<!--    <properties>-->
<!--      <property name="allowMultipleArguments" value="false"/>-->
<!--    </properties>-->
<!--  </rule>-->

<!--  &lt;!&ndash; Have 12 chars padding maximum and always show as errors &ndash;&gt;-->
<!--  <rule ref="Generic.Formatting.MultipleStatementAlignment">-->
<!--    <properties>-->
<!--      <property name="maxPadding" value="12"/>-->
<!--      <property name="error" value="true"/>-->
<!--    </properties>-->
<!--  </rule>-->

<!--  &lt;!&ndash; Ban some functions &ndash;&gt;-->
<!--  <rule ref="Generic.PHP.ForbiddenFunctions">-->
<!--    <properties>-->
<!--      <property name="forbiddenFunctions" type="array">-->
<!--        <element key="sizeof" value="count"/>-->
<!--        <element key="delete" value="unset"/>-->
<!--        <element key="print" value="echo"/>-->
<!--        <element key="is_null" value="null"/>-->
<!--        <element key="create_function" value="null"/>-->
<!--      </property>-->
<!--    </properties>-->
<!--  </rule>-->

<!--  &lt;!&ndash; Private methods MUST not be prefixed with an underscore &ndash;&gt;-->
<!--  <rule ref="PSR2.Methods.MethodDeclaration.Underscore">-->
<!--    <type>error</type>-->
<!--  </rule>-->

<!--  &lt;!&ndash; Private properties MUST not be prefixed with an underscore &ndash;&gt;-->
<!--  <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">-->
<!--    <type>error</type>-->
<!--  </rule>-->

<!--  &lt;!&ndash; The testing bootstrap file uses string concats to stop IDEs seeing the class aliases &ndash;&gt;-->
<!--  <rule ref="Generic.Strings.UnnecessaryStringConcat">-->
<!--    <exclude-pattern>tests/bootstrap.php</exclude-pattern>-->
<!--  </rule>-->

</ruleset>